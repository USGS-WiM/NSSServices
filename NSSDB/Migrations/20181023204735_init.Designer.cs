// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NSSDB;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace NSSDB.Migrations
{
    [DbContext(typeof(NSSDBContext))]
    [Migration("20181023204735_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("nss")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("NSSDB.Resources.Citation", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Author")
                        .IsRequired();

                    b.Property<string>("CitationURL")
                        .IsRequired();

                    b.Property<DateTime>("LastModified");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("ID");

                    b.ToTable("Citations");
                });

            modelBuilder.Entity("NSSDB.Resources.Equation", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<double?>("DA_Exponent");

                    b.Property<double?>("EquivalentYears");

                    b.Property<string>("Expression")
                        .IsRequired();

                    b.Property<DateTime>("LastModified");

                    b.Property<int?>("OrderIndex");

                    b.Property<int?>("PredictionIntervalID");

                    b.Property<int>("RegressionRegionID");

                    b.Property<int>("RegressionTypeID");

                    b.Property<int>("StatisticGroupTypeID");

                    b.Property<int>("UnitTypeID");

                    b.HasKey("ID");

                    b.HasIndex("PredictionIntervalID");

                    b.HasIndex("RegressionRegionID");

                    b.HasIndex("RegressionTypeID");

                    b.HasIndex("StatisticGroupTypeID");

                    b.HasIndex("UnitTypeID");

                    b.ToTable("Equations");
                });

            modelBuilder.Entity("NSSDB.Resources.EquationError", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("EquationID");

                    b.Property<int>("ErrorTypeID");

                    b.Property<DateTime>("LastModified");

                    b.Property<double>("Value");

                    b.HasKey("ID");

                    b.HasIndex("EquationID");

                    b.HasIndex("ErrorTypeID");

                    b.ToTable("EquationErrors");
                });

            modelBuilder.Entity("NSSDB.Resources.EquationUnitType", b =>
                {
                    b.Property<int>("EquationID");

                    b.Property<int>("UnitTypeID");

                    b.Property<DateTime>("LastModified");

                    b.HasKey("EquationID", "UnitTypeID");

                    b.HasIndex("UnitTypeID");

                    b.ToTable("EquationUnitTypes");
                });

            modelBuilder.Entity("NSSDB.Resources.Limitation", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Criteria")
                        .IsRequired();

                    b.Property<string>("Description");

                    b.Property<DateTime>("LastModified");

                    b.Property<int>("RegressionRegionID");

                    b.HasKey("ID");

                    b.HasIndex("RegressionRegionID");

                    b.ToTable("Limitations");
                });

            modelBuilder.Entity("NSSDB.Resources.Manager", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<DateTime>("LastModified");

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<string>("OtherInfo");

                    b.Property<string>("Password")
                        .IsRequired();

                    b.Property<string>("PrimaryPhone");

                    b.Property<int>("RoleID");

                    b.Property<string>("Salt")
                        .IsRequired();

                    b.Property<string>("SecondaryPhone");

                    b.Property<string>("Username")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("RoleID");

                    b.HasIndex("Username");

                    b.ToTable("Managers");
                });

            modelBuilder.Entity("NSSDB.Resources.PredictionInterval", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<double?>("BiasCorrectionFactor");

                    b.Property<string>("CovarianceMatrix");

                    b.Property<DateTime>("LastModified");

                    b.Property<double?>("Student_T_Statistic");

                    b.Property<double?>("Variance");

                    b.Property<string>("XIRowVector");

                    b.HasKey("ID");

                    b.ToTable("PredictionIntervals");
                });

            modelBuilder.Entity("NSSDB.Resources.Region", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<string>("Description");

                    b.Property<DateTime>("LastModified");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("Code");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("NSSDB.Resources.RegionManager", b =>
                {
                    b.Property<int>("ManagerID");

                    b.Property<int>("RegionID");

                    b.Property<DateTime>("LastModified");

                    b.HasKey("ManagerID", "RegionID");

                    b.HasIndex("RegionID");

                    b.ToTable("RegionManager");
                });

            modelBuilder.Entity("NSSDB.Resources.RegionRegressionRegion", b =>
                {
                    b.Property<int>("RegionID");

                    b.Property<int>("RegressionRegionID");

                    b.Property<DateTime>("LastModified");

                    b.HasKey("RegionID", "RegressionRegionID");

                    b.HasIndex("RegressionRegionID");

                    b.ToTable("RegionRegressionRegions");
                });

            modelBuilder.Entity("NSSDB.Resources.RegressionRegion", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CitationID");

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<string>("Description");

                    b.Property<DateTime>("LastModified");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("CitationID");

                    b.HasIndex("Code");

                    b.ToTable("RegressionRegions");
                });

            modelBuilder.Entity("NSSDB.Resources.RegressionRegionCoefficient", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Criteria")
                        .IsRequired();

                    b.Property<string>("Description");

                    b.Property<DateTime>("LastModified");

                    b.Property<int>("RegressionRegionID");

                    b.Property<string>("Value")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("RegressionRegionID");

                    b.ToTable("RegressionRegionCoefficients");
                });

            modelBuilder.Entity("NSSDB.Resources.Role", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<DateTime>("LastModified");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("ID");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("NSSDB.Resources.UserType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("LastModified");

                    b.Property<int>("UnitSystemID");

                    b.Property<string>("User")
                        .IsRequired();

                    b.HasKey("ID");

                    b.ToTable("UserTypes");
                });

            modelBuilder.Entity("NSSDB.Resources.Variable", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comments");

                    b.Property<int?>("EquationID");

                    b.Property<DateTime>("LastModified");

                    b.Property<int?>("LimitationID");

                    b.Property<double?>("MaxValue");

                    b.Property<double?>("MinValue");

                    b.Property<int?>("RegressionRegionCoefficientID");

                    b.Property<int?>("RegressionTypeID");

                    b.Property<int>("UnitTypeID");

                    b.Property<int>("VariableTypeID");

                    b.HasKey("ID");

                    b.HasIndex("EquationID");

                    b.HasIndex("LimitationID");

                    b.HasIndex("RegressionRegionCoefficientID");

                    b.ToTable("Variables");
                });

            modelBuilder.Entity("NSSDB.Resources.VariableUnitType", b =>
                {
                    b.Property<int>("VariableID");

                    b.Property<int>("UnitTypeID");

                    b.Property<DateTime>("LastModified");

                    b.HasKey("VariableID", "UnitTypeID");

                    b.HasIndex("UnitTypeID");

                    b.ToTable("VariableUnitTypes");
                });

            modelBuilder.Entity("SharedDB.Resources.ErrorType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<DateTime>("LastModified");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("ID");

                    b.ToTable("ErrorType_view");
                });

            modelBuilder.Entity("SharedDB.Resources.RegressionType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<string>("Description");

                    b.Property<DateTime>("LastModified");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("ID");

                    b.ToTable("RegressionType_view");
                });

            modelBuilder.Entity("SharedDB.Resources.StatisticGroupType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<DateTime>("LastModified");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("ID");

                    b.ToTable("StatisticGroupType_view");
                });

            modelBuilder.Entity("SharedDB.Resources.UnitConversionFactor", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("Factor");

                    b.Property<DateTime>("LastModified");

                    b.Property<int>("UnitTypeInID");

                    b.Property<int>("UnitTypeOutID");

                    b.HasKey("ID");

                    b.HasIndex("UnitTypeInID");

                    b.HasIndex("UnitTypeOutID");

                    b.ToTable("UnitConversionFactor_view");
                });

            modelBuilder.Entity("SharedDB.Resources.UnitSystemType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("LastModified");

                    b.Property<string>("UnitSystem")
                        .IsRequired();

                    b.HasKey("ID");

                    b.ToTable("UnitSystemType_view");
                });

            modelBuilder.Entity("SharedDB.Resources.UnitType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Abbreviation")
                        .IsRequired();

                    b.Property<DateTime>("LastModified");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("UnitSystemTypeID");

                    b.HasKey("ID");

                    b.HasIndex("UnitSystemTypeID");

                    b.ToTable("UnitType_view");
                });

            modelBuilder.Entity("SharedDB.Resources.VariableType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<string>("Description");

                    b.Property<DateTime>("LastModified");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("ID");

                    b.ToTable("VariableType_view");
                });

            modelBuilder.Entity("NSSDB.Resources.Equation", b =>
                {
                    b.HasOne("NSSDB.Resources.PredictionInterval", "PredictionInterval")
                        .WithMany("Equation")
                        .HasForeignKey("PredictionIntervalID");

                    b.HasOne("NSSDB.Resources.RegressionRegion", "RegressionRegion")
                        .WithMany("Equations")
                        .HasForeignKey("RegressionRegionID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SharedDB.Resources.RegressionType", "RegressionType")
                        .WithMany()
                        .HasForeignKey("RegressionTypeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SharedDB.Resources.StatisticGroupType", "StatisticGroupType")
                        .WithMany()
                        .HasForeignKey("StatisticGroupTypeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SharedDB.Resources.UnitType", "UnitType")
                        .WithMany()
                        .HasForeignKey("UnitTypeID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("NSSDB.Resources.EquationError", b =>
                {
                    b.HasOne("NSSDB.Resources.Equation", "Equation")
                        .WithMany("EquationErrors")
                        .HasForeignKey("EquationID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SharedDB.Resources.ErrorType", "ErrorType")
                        .WithMany()
                        .HasForeignKey("ErrorTypeID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("NSSDB.Resources.EquationUnitType", b =>
                {
                    b.HasOne("NSSDB.Resources.Equation", "Equation")
                        .WithMany()
                        .HasForeignKey("EquationID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SharedDB.Resources.UnitType", "UnitType")
                        .WithMany()
                        .HasForeignKey("UnitTypeID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NSSDB.Resources.Limitation", b =>
                {
                    b.HasOne("NSSDB.Resources.RegressionRegion", "RegressionRegion")
                        .WithMany("Limitations")
                        .HasForeignKey("RegressionRegionID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NSSDB.Resources.Manager", b =>
                {
                    b.HasOne("NSSDB.Resources.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("NSSDB.Resources.RegionManager", b =>
                {
                    b.HasOne("NSSDB.Resources.Manager", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NSSDB.Resources.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NSSDB.Resources.RegionRegressionRegion", b =>
                {
                    b.HasOne("NSSDB.Resources.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NSSDB.Resources.RegressionRegion", "RegressionRegion")
                        .WithMany()
                        .HasForeignKey("RegressionRegionID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NSSDB.Resources.RegressionRegion", b =>
                {
                    b.HasOne("NSSDB.Resources.Citation", "Citation")
                        .WithMany("RegressionRegions")
                        .HasForeignKey("CitationID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NSSDB.Resources.RegressionRegionCoefficient", b =>
                {
                    b.HasOne("NSSDB.Resources.RegressionRegion", "RegressionRegion")
                        .WithMany("RegressionRegionCoefficients")
                        .HasForeignKey("RegressionRegionID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NSSDB.Resources.Variable", b =>
                {
                    b.HasOne("NSSDB.Resources.Equation", "Equation")
                        .WithMany("Variables")
                        .HasForeignKey("EquationID");

                    b.HasOne("NSSDB.Resources.Limitation", "Limitation")
                        .WithMany("Variables")
                        .HasForeignKey("LimitationID");

                    b.HasOne("NSSDB.Resources.RegressionRegionCoefficient", "RegressionRegionCoefficient")
                        .WithMany("Variables")
                        .HasForeignKey("RegressionRegionCoefficientID");
                });

            modelBuilder.Entity("NSSDB.Resources.VariableUnitType", b =>
                {
                    b.HasOne("SharedDB.Resources.UnitType", "UnitType")
                        .WithMany()
                        .HasForeignKey("UnitTypeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NSSDB.Resources.Variable", "Variable")
                        .WithMany("VariableUnitTypes")
                        .HasForeignKey("VariableID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SharedDB.Resources.UnitConversionFactor", b =>
                {
                    b.HasOne("SharedDB.Resources.UnitType", "UnitTypeIn")
                        .WithMany("UnitConversionFactorsIn")
                        .HasForeignKey("UnitTypeInID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SharedDB.Resources.UnitType", "UnitTypeOut")
                        .WithMany("UnitConversionFactorsOut")
                        .HasForeignKey("UnitTypeOutID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SharedDB.Resources.UnitType", b =>
                {
                    b.HasOne("SharedDB.Resources.UnitSystemType", "UnitSystemType")
                        .WithMany("UnitTypes")
                        .HasForeignKey("UnitSystemTypeID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
